{"version":3,"file":"static/js/941.d868a50c.chunk.js","mappings":"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","sources":["pages/StatisticsPage/StatisticsPage.styled.js","components/StatisticsChart/StatisticsChart.js","pages/StatisticsPage/StatisticsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n  padding: 40px;\n  border: 0.8px solid #e3f3ff;\n  border-radius: 29px;\n`;\n\nexport const Text = styled.p`\n  color: #343434;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 150%;\n  text-align: left;\n`;\n","import { useState, useEffect, useCallback } from 'react';\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst StatisticsChart = ({ date, tasks }) => {\n  const [tasksStatistic, setTasksStatistic] = useState([]);\n  \n  const getProcentTaskStatistic = useCallback( arr => {\n\n  const checkTasksPercent = percent => (isFinite(percent) ? percent : 0);\n\n    let toDo = 0;\n    let inProgress = 0;\n    let done = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].category === 'to-do') {\n        toDo++;\n      } else if (arr[i].category === 'in-progress') {\n        inProgress++;\n      } else {\n        done++;\n      }\n    }\n\n    const todoProc = checkTasksPercent(Math.floor((toDo * 100) / arr.length));\n    const inProgressProc = checkTasksPercent(\n      Math.floor((inProgress * 100) / arr.length)\n    );\n    const doneProc = checkTasksPercent(Math.floor((done * 100) / arr.length));\n\n    return [todoProc, inProgressProc, doneProc];\n  }, [])\n\n  useEffect(() => {\n    const data = [\n      {\n        name: 'To Do',\n        day: 0,\n        month: 0,\n      },\n      {\n        name: 'In Progress',\n        day: 0,\n        month: 0,\n      },\n      {\n        name: 'Done',\n        day: 0,\n        month: 0,\n      },\n    ];\n    const filteredDatesByMonth = tasks.filter(\n      task => new Date(task.date).getMonth() === date.getMonth()\n    );\n\n    const filteredDatesByDay = tasks.filter(\n      task => new Date(task.date).getDate() === date.getDate()\n    );\n\n    const statisticMonth = getProcentTaskStatistic(filteredDatesByMonth);\n    const statisticDay = getProcentTaskStatistic(filteredDatesByDay);\n\n    data[0].month = statisticMonth[0];\n    data[1].month = statisticMonth[1];\n    data[2].month = statisticMonth[2];\n\n    data[0].day = statisticDay[0];\n    data[1].day = statisticDay[1];\n    data[2].day = statisticDay[2];\n\n    setTasksStatistic(data);\n  }, [date, getProcentTaskStatistic, tasks]);\n\n  const renderLabel = props => {\n    const { x, y, width, value } = props;\n    return (\n      <text x={x + width / 2} y={y} fill=\"#black\" textAnchor=\"middle\" dy={-6}>\n        {value} %\n      </text>\n    );\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        width={150}\n        height={40}\n        data={tasksStatistic}\n        barGap={-95}\n        maxBarSize={27}\n        margin={{\n          top: 20,\n          right: 20,\n          left: 20,\n          bottom: 20,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"0\" vertical={false} />\n        <XAxis dataKey=\"name\" />\n        <YAxis\n          axisLine={false}\n          tickLine={false}\n          domain={[0, 100]}\n          tickCount={6}\n        />\n        <Tooltip cursor={{ fill: 'transparent' }} />\n        <Bar\n          dataKey=\"day\"\n          unit=\"%\"\n          fill=\"url(#gradient)\"\n          label={{ content: renderLabel }}\n          radius={[0, 0, 10, 10]}\n        />\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0.1} />\n            <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n        <Bar\n          dataKey=\"month\"\n          unit=\"%\"\n          fill=\"url(#gradient2)\"\n          label={{ content: renderLabel }}\n          radius={[0, 0, 10, 10]}\n        />\n        <defs>\n          <linearGradient id=\"gradient2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0.1} />\n            <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default StatisticsChart;\n","import { useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { format } from 'date-fns';\nimport { Container, Text } from './StatisticsPage.styled';\nimport { PeriodPaginator } from 'components/CalendarToolbar/PeriodPaginator/PeriodPaginator';\nimport StatisticsChart from '../../components/StatisticsChart/StatisticsChart';\nimport {getDate} from 'redux/currentDate/selector';\nimport {setDate} from 'redux/currentDate/curentDateSlice';\nimport { fetchAllTasks } from 'redux/task/operations';\nimport {selectAllTasks} from 'redux/task/selectors'\n\nconst StatisticsPage = () => {\n\n  const dispatch = useDispatch();\n  const date = new Date(useSelector(getDate));\n  const tasks = useSelector(selectAllTasks)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const dateObj = {\n    month: format(date, \"L\"),\n    year: format(date, \"yyyy\"),\n  };\n\n  const prevMonthRef = useRef(dateObj.month);\n\n  const handleSetDate = (newDate) => {\n    dispatch(setDate(newDate.toString()))\n  }\n\n  useEffect(() => {\n    const {year, month} = dateObj\n\n    if (prevMonthRef.current !== month) {\n      dispatch(fetchAllTasks({ month, year }));\n    }\n    prevMonthRef.current = month;\n  }, [ dispatch, dateObj]);\n\n  return (\n    <div style={{ padding: '100px' }}>\n      <PeriodPaginator\n        minDate={'Jun 23 2023'}\n        date={date}\n        setDate={handleSetDate}\n        typenav={'day'}\n      />\n\n      <Container style={{ width: 860, height: 440, margin: 'auto' }}>\n        <Text>Tasks</Text>\n        <StatisticsChart date={date} tasks={tasks} />\n      </Container>\n    </div>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["Container","styled","Text","date","tasks","useState","tasksStatistic","setTasksStatistic","getProcentTaskStatistic","useCallback","arr","checkTasksPercent","percent","isFinite","toDo","inProgress","done","i","length","category","Math","floor","useEffect","data","name","day","month","filteredDatesByMonth","filter","task","Date","getMonth","filteredDatesByDay","getDate","statisticMonth","statisticDay","renderLabel","props","x","y","width","value","fill","textAnchor","dy","ResponsiveContainer","height","BarChart","barGap","maxBarSize","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","vertical","XAxis","dataKey","YAxis","axisLine","tickLine","domain","tickCount","Tooltip","cursor","Bar","unit","label","content","radius","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dispatch","useDispatch","useSelector","selectAllTasks","dateObj","format","year","prevMonthRef","useRef","current","fetchAllTasks","style","padding","PeriodPaginator","minDate","setDate","newDate","toString","typenav"],"sourceRoot":""}