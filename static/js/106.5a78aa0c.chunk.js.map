{"version":3,"file":"static/js/106.5a78aa0c.chunk.js","mappings":"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","sources":["components/UserForm/UserForm.styled.jsx","components/CalendarToolbar/CalendarToolbar.styled.jsx","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.jsx","utils/calendarToolbar/formatPeriod.js","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.js","utils/calendarToolbar/changeDate.js","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.js","components/CalendarToolbar/CalendarToolbar.js","components/Calendar/Calendar.styled.jsx","components/ChoosedMonth/CalendarTable/CalendarTable.styled.jsx","components/ChoosedMonth/CalendarTable/CalendarTable.js","components/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.js","components/ChoosedMonth/ChoosedMonth.jsx","components/ChoosedDay/DayCalendarHead.styled.jsx","components/ChoosedDay/DayCalendarHead.js","components/ChoosedDay/TasksColumn/TasksComponents/ColumnHeadBar.styled.jsx","components/ChoosedDay/TasksColumn/TasksComponents/ColumnHeadBar.js","components/ChoosedDay/TasksColumn/TasksComponents/ColumnTasksList.js","components/ChoosedDay/TasksColumn/TasksColumn.jsx","components/ChoosedDay/TasksColumnsList.styled.jsx","components/ChoosedDay/TasksColumnsList.js","components/ChoosedDay/ChoosedDay.js","components/Calendar/Calendar.js","pages/CalendarPage/CalendarPage.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Form, Field } from 'formik';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nexport const Wrapper = styled.div`\n display: flex;\n flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  background: rgba(255, 255, 255, 1); \n  border-radius: 16px;\n   padding: 40px 18px;\n\n    @media screen and (min-width: 1440px) {\n      padding-top: 60px;\n    }\n`;\n\nexport const FormUserProfile = styled(Form)`\ndisplay: flex;\nflex-direction: column;\nwidth: 100%;\n\n    @media screen and (min-width: 375px) {\n      width: 299px;\n    }\n\n    @media screen and (min-width: 768px) {\n        width: 354px;\n    }\n     @media screen and (min-width: 1440px) {\n        width: 758px;\n    }\n`;\n\nexport const BtnUploadAvatar = styled(Field)`\nopacity: 1;\nposition: absolute;\nbottom: 92%;\nright: 23%;\noverflow: hidden;\nwidth: 14px;\nheight: 14px;\nborder-radius: 50%;\n\n @media screen and (min-width: 768px) {\n       width: 24px;\n       height: 24px;\n       bottom: 31%;\n       right: 14%;\n    }\n`;\n\nexport const Avatar = styled.img`\n  border-radius: inherit;\n`;\n\nexport const LabelAvatar = styled.label`\nposition: relative;\nmargin: 0 auto;\nmargin-bottom: 40px;\ntext-align: center;\n`;\n\n\nexport const AvatarWrapper = styled.div`\nposition: absolute;\ntop: -71px;\nwidth: 72px;\nmargin: 0 auto;\nborder: 2px solid rgba(62, 133, 243, 1);\nborder-radius: 50%;\n\n @media screen and (min-width: 768px) {\n       top: 0;\n       width: 124px;\n       left: -17%;\n    }\n`;\n\nexport const UserName = styled.p`\nmargin-top: 18px;\n\nfont-size: 14px;\nfont-weight: 700;\n\n @media screen and (min-width: 768px) {\n    margin-top: 144px;\n      font-size: 18px;\n      margin-bottom: 8px;\n    }\n`;\n\nexport const UserLabel = styled.span`\nfont-size: 12px;\nfont-weight: 600;\nline-height: 1.17;\n\n @media screen and (min-width: 768px) {\n    font-size: 14px;\n    line-height: 1.3;\n    }\n`;\n\nexport const Input = styled(Field)`\nwidth: 100%;\nheight: 40px;\nborder-radius: 8px;\nborder: 1px solid rgba(17, 17, 17, 0.1);\noutline: none;\nmargin-top: 8px;\nmargin-bottom: 18px;\npadding: 12px 14px;\nfont-weight: 600;\nfont-size: 14px;\nline-height: 1.3;\n\n @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: 1.13;\n    }\n\n@media screen and (min-width: 1440px) {\n   width: 354px;\n    }\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\nfont-weight: 400;\nfont-size: 12px;\nline-height: 1.17;\ncolor: rgba(17, 17, 17, 1);\n\n @media screen and (min-width: 768px) {\n    font-size: 14px;\n    line-height: 1.3;\n    }\n`;\n\nexport const MainFieldWrapper = styled.div`\n @media screen and (min-width: 1440px) {\n    display: flex;\n   flex-wrap: wrap;\n   gap: 50px;\n   margin-bottom: 70px;\n    }\n`;\nexport const BlockFieldWrapper = styled.div`\n @media screen and (min-width: 1440px) {\n    display: flex;\n    flex-direction: column;\n\n    }\n`;\n\n\nexport const SubmitBtn = styled.button`\n  margin: 0 auto;\n  margin-top: 22px;\n  width: 195px;\n  height: 46px;\n  border-radius: 16px;\n  border: none;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  background: rgba(62, 133, 243, 1);\n  color: rgba(255, 255, 255, 1);\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n      width: 262px;\n    }\n\n//   transition: background-color анимация;\n\n  :disabled {\n    cursor: not-allowed;\n  }\n\n  :hover,\n  :focus {\n    background-color: rgba(43, 120, 239, 1);\n  }\n\n  :disabled {\n    opacity: 0.4;\n  }\n\n`;\n\nexport const DatePickerStyles = styled(DatePicker)`\n\nwidth: 100%;\nheight: 40px;\nborder-radius: 8px;\nborder: 1px solid rgba(17, 17, 17, 0.1);\noutline: none;\nmargin-top: 8px;\nmargin-bottom: 18px;\npadding: 12px 14px;\nfont-weight: 600;\nfont-size: 14px;\nline-height: 1.3;\n\n @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: 1.3;\n    }\n\n@media screen and (min-width: 1440px) {\n   width: 354px;\n    }\n`;\n\nexport const DatePickerWrapper = styled.div`\n  .react-datepicker {\n    background-color: rgba(62, 133, 243, 1);\n    border-radius: 16px;\n    overflow: hidden;\n    border: none;\n    color: rgba(255, 255, 255, 1);\n    width: 327px;\n    height: 354px;\n    display: flex;\n    justify-content: center;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.3;\n}\n.react-datepicker__header {\n        position: relative;\n\n    background-color: rgba(62, 133, 243, 1);\n    border-bottom: 1px solid rgba(62, 133, 243, 1);\n  }\n\n  .react-datepicker__navigation-icon {\n    ::before {\n      border-color: rgba(255, 255, 255, 1);\n    }\n\n.react-datepicker__navigation--next {\n    right: 9px;\n    top: 35px;\n}\n  }\n\n  .react-datepicker__month-select,\n  .react-datepicker__year-select {\n    padding: 5px;\n    width: 90px;\n    color: rgba(255, 255, 255, 1);\n\n    text-align: center;\n    font-size: 10px;\n    overflow-y: auto;\n    cursor: pointer;\n\n    @media screen and (min-width: 375px) {\n      width: 110px;\n    }\n\n    @media screen and (min-width: 1440px) {\n      width: 120px;\n      font-size: 16px;\n    }\n\n    &:focus {\n      outline: none;\n    }\n\n    ::-webkit-scrollbar {\n      box-sizing: border-box;\n      width: 5px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n      background: rgba(255, 255, 255, 1);\n      border-radius: 10px;\n      margin-top: 15px;\n      margin-bottom: 15px;\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n      background: var(--color-button-period-type);\n      border-radius: 10px;\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n      background: var(--primary-text-color);\n    }\n  }\n\n  .react-datepicker__current-month {\n    margin-top: 15px;\n    margin-bottom: 11px;\n    font-size: 20px;\n    font-weight: 600;\n    line-height : 1.2;\n\n    color: rgba(255, 255, 255, 1);\n  }\n\n  .react-datepicker__day-name {\n     width: 46px;\n    height: 42px;\n    margin: 0;\n    padding: 9px;\n    color: rgba(255, 255, 255, 1);\n  }\n\n  .react-datepicker__day {\n    width: 46px;\n    height: 46px;\n    margin: 0;\n    padding: 9px;\n    color: rgba(255, 255, 255, 1);\n    :hover,\n    :focus {\n      background-color: var(--auth-bg-color);\n      color: var(--hover-btn-background-color);\n      border-radius: 24px;\n      opacity: 0.7;\n    }\n  }\n\n\n\n  .react-datepicker__day--weekend {\n    color: rgba(255, 255, 255, 1));\n    opacity: 40%;\n  }\n\n\n    .react-datepicker__day--today,\n  .react-datepicker__day--selected {\n    background-color: rgba(255, 255, 255, 1);\n    color: rgba(62, 133, 243, 1);\n    border-radius: 50%;\n    opacity: 1;\n  }\n\n    .react-datepicker__day--keyboard-selected{\n            border-radius: 50%;\n    }\n\n    .react-datepicker__month {\n    margin: 0;\n}\n\n\n.react-datepicker__navigation--previous {\n    left: 7px;\n    top: 30px;\n}\n\n.react-datepicker__navigation--next {\n    right: 7px;\n    top: 30px;\n}\n\n.react-datepicker__day-names {\nborder-bottom: 1px solid rgba(255, 255, 255, 0.2);\n}\n    `;\n\n\n\n\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-bottom: 24px;\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    justify-content: space-between;\n\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-bottom: 32px;\n  }\n`;\n","import styled from 'styled-components';\nimport {\n  MdOutlineKeyboardArrowLeft,\n  MdOutlineKeyboardArrowRight,\n} from 'react-icons/md';\n\nimport {\n  DatePickerStyles,\n  DatePickerWrapper,\n} from 'components/UserForm/UserForm.styled';\n\nexport const Period = styled.span`\n  padding: 6px 12px;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 600;\n  background-color: #3e85f3;\n  border-radius: 8px;\n  cursor: pointer;\n  @media screen and (min-width: 768px) {\n    padding: 8px 12px;\n    font-size: 16px;\n  }\n`;\n\nexport const PickerWrapper = styled(DatePickerWrapper)`\n  position: absolute;\n  left: 0;\n  top: 8px;\n\n  @media screen and (min-width: 768px) {\n    top: 13px;\n  }\n\n  .react-datepicker {\n    width: 235px;\n    height: 100%;\n    padding: 18px;\n  }\n\n  .react-datepicker__month-container {\n    width: 235px;\n  }\n\n  .react-datepicker__header {\n    padding: 0;\n  }\n  .react-datepicker__current-month {\n    margin: 0;\n    margin-bottom: 18px;\n  }\n  .react-datepicker__navigation {\n    top: 16px;\n    width: 20px;\n    height: 20px;\n    text-align: center;\n\n    :focus-visible {\n      outline: 2px solid #fff;\n    }\n  }\n\n  .react-datepicker__navigation--previous {\n    left: 20px;\n  }\n  .react-datepicker__navigation-icon--previous {\n    top: 1px;\n    right: 0;\n  }\n\n  .react-datepicker__navigation--next {\n    right: 20px;\n  }\n\n  .react-datepicker__navigation-icon--next {\n    top: 1px;\n    left: 0;\n  }\n  .react-datepicker__navigation-icon--next::before {\n  }\n\n  .react-datepicker__current-month {\n    font-size: 16px;\n    font-family: Inter;\n    font-weight: 600;\n    letter-spacing: -0.32px;\n  }\n  .react-datepicker__day-names {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 199px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 8px;\n\n    border: none;\n  }\n\n  .react-datepicker__day-name {\n    width: 24px;\n    height: 17px;\n    padding: 0;\n\n    font-size: 14px;\n    font-family: Inter;\n    font-weight: 500;\n    letter-spacing: -0.28px;\n    line-height: 1.3;\n    color: #ffffff80;\n    cursor: default;\n  }\n\n  .react-datepicker__month {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 13px;\n    width: 235px;\n    padding-left: 18px;\n    padding-right: 18px;\n    padding-top: 10px;\n    border-top: 1px solid #ffffff33;\n  }\n\n  .react-datepicker__day--outside-month,\n  .react-datepicker__day--disabled {\n    color: #ffffff33;\n  }\n\n  .react-datepicker__day--disabled.react-datepicker__day {\n    cursor: default;\n  }\n\n  .react-datepicker__day--weekend {\n    opacity: 1;\n  }\n\n  .react-datepicker__week {\n    width: 199px;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .react-datepicker__day {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 24px;\n    height: 24px;\n\n    font-size: 14px;\n    font-family: Inter;\n    line-height: 1.3;\n    letter-spacing: -0.28px;\n    cursor: pointer;\n\n    :hover {\n      background-color: #fff;\n      color: #3e85f3;\n      border-radius: 24px;\n      opacity: 0.8;\n    }\n\n    :focus,\n    :focus-visible {\n      background-color: #fff;\n      color: #3e85f3;\n      border-radius: 24px;\n      opacity: 1;\n    }\n\n    :focus-visible {\n      outline: none;\n    }\n  }\n\n  .react-datepicker__day--keyboard-selected {\n    background-color: #fff;\n    color: #3e85f3;\n    opacity: 0.7;\n  }\n\n  .react-datepicker__day--today {\n    border: 1px solid #fff;\n    background-color: transparent;\n    color: #fff;\n  }\n  .react-datepicker__day--selected.react-datepicker__day--today,\n  .react-datepicker__day--outside-month.react-datepicker__day--selected {\n    background-color: #fff;\n    color: #3e85f3;\n  }\n`;\n\nexport const DatePickerCastom = styled(DatePickerStyles)`\n  display: none;\n`;\n\nexport const Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n\n  @media screen and (min-width: 768px) {\n    justify-content: none;\n    gap: 8px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const ContainerBtn = styled.div`\n  display: flex;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 30px;\n  font-size: 14px;\n  color: #343434;\n  border: 1px solid #edf1f2;\n  background-color: #fff;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    width: 38px;\n    height: 34px;\n  }\n`;\n\nexport const ButtonLeft = styled(Button)`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: none;\n  background-color: ${props => props.typeDate === 'month' && '#CAE8FF'};\n`;\n\nexport const ButtonRight = styled(Button)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  background-color: ${props => props.typeDate === 'day' && '#CAE8FF'};\n`;\n\nexport const ArrowLeft = styled(MdOutlineKeyboardArrowLeft)`\n  width: 16px;\n  height: 16px;\n  fill: ${props => (props.disabled ? '#DCE3E5' : '#343434')};\n\n  @media screen and (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;\n\nexport const ArrowRight = styled(MdOutlineKeyboardArrowRight)`\n  width: 16px;\n  height: 16px;\n  fill: #343434;\n\n  @media screen and (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;\n","export const formatPeriod = (date, type) => {\n  const options = {};\n  let formattedDate = '';\n\n  if (type === 'month') {\n    options.month = 'long';\n    options.year = 'numeric';\n    formattedDate = new Intl.DateTimeFormat('en-US', options).format(date);\n  } else if (type === 'day') {\n    options.day = 'numeric';\n    options.month = 'short';\n    options.year = 'numeric';\n    const newDate = new Intl.DateTimeFormat('en-US', options).format(date);\n    const year = newDate.split(\",\")[1];\n    const dayMonth = newDate.split(\",\")[0].split(\" \").reverse().join(\" \");\n    formattedDate = `${dayMonth}${year}`\n  }\n\n  return formattedDate;\n}","import { useEffect, useState } from 'react';\nimport {\n  ArrowLeft,\n  ArrowRight,\n  ButtonLeft,\n  ButtonRight,\n  ContainerBtn,\n  Period,\n  Wrapper,\n  PickerWrapper,\n  DatePickerCastom,\n} from './PeriodPaginator.styled';\n\nimport { formatPeriod } from 'utils/calendarToolbar/formatPeriod';\nimport { changeDate } from 'utils/calendarToolbar/changeDate';\n\nexport const PeriodPaginator = ({ minDate, date, setDate, typenav }) => {\n  const [period, setPeriod] = useState(() => formatPeriod(date, typenav));\n  const [openPicker, setOpenPicker] = useState(false);\n  const [minDateDisabled, setMinDateDisabled] = useState(false);\n\n  const handlePickerChange = newValue => {\n    setDate(newValue);\n    setOpenPicker(false);\n  };\n\n  const handleClickPeriod = () => {\n    if (typenav === 'day') {\n      setOpenPicker(true);\n    }\n  };\n\n  const handleClick = num => {\n    setDate(changeDate(date, num, typenav));\n  };\n\n  useEffect(() => {\n    setPeriod(formatPeriod(date, typenav));\n  }, [typenav, date]);\n\n  useEffect(() => {\n    const months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n\n    if (typenav === 'day') {\n      const formattedDate = `${\n        months[date.getMonth()]\n      } ${date.getDate()} ${date.getFullYear()}`;\n\n      setMinDateDisabled(formattedDate === minDate);\n    }\n    if (typenav === 'month') {\n      const formattedDate = `${months[date.getMonth()]} ${date.getFullYear()}`;\n      const arrDate = minDate.split(' ');\n      const newMinDate = `${arrDate[0]} ${arrDate[2]}`;\n      setOpenPicker(false);\n      setMinDateDisabled(formattedDate === newMinDate);\n    }\n  }, [date, minDate, typenav]);\n\n  return (\n    <Wrapper>\n      <Period onClick={handleClickPeriod}>{period}</Period>\n\n      <PickerWrapper>\n        {openPicker && typenav === 'day' && (\n          <DatePickerCastom\n            open\n            selected={date}\n            calendarStartDay={1}\n            closeOnSelect={true}\n            minDate={new Date(minDate)}\n            onChange={handlePickerChange}\n            formatWeekDay={nameOfDay => nameOfDay.slice(0, 1)}\n            onClickOutside={() => setOpenPicker(false)}\n          />\n        )}\n      </PickerWrapper>\n\n      <ContainerBtn>\n        <ButtonLeft onClick={() => handleClick(-1)} disabled={minDateDisabled}>\n          <ArrowLeft disabled={minDateDisabled} />\n        </ButtonLeft>\n\n        <ButtonRight onClick={() => handleClick(1)}>\n          <ArrowRight />\n        </ButtonRight>\n      </ContainerBtn>\n    </Wrapper>\n  );\n};\n","export const changeDate = (date, num, type) => {\n  const modifiedDate = new Date(date);\n  if (type === 'month') {\n    modifiedDate.setMonth(modifiedDate.getMonth() + num);\n    return modifiedDate;\n  }\n  if (type === 'day') {\n    modifiedDate.setDate(modifiedDate.getDate() + num);\n    return modifiedDate;\n  }\n};\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  display: inline;\n  width: 76px;\n  height: 34px;\n  font-size: 14px;\n  color: #3e85f3;\n  background-color: #e3f3ff;\n\n  @media screen and (min-width: 768px) {\n    width: 82px;\n    height: 34px;\n    font-size: 16px;\n  }\n`;\n\nexport const ButtonMonth = styled(Button)`\n  border-radius: none;\n\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: 1px solid #aed4fd;\n  background-color: ${props => props.typenav === 'month' && '#CAE8FF'};\n`;\n\nexport const ButtonDay = styled(Button)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  background-color: ${props => props.typenav === 'day' && '#CAE8FF'};\n`;\n","import { ButtonDay, ButtonMonth } from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = ({ typenav, setTypeNav }) => {\n  return (\n    <div>\n      <ButtonMonth onClick={() => setTypeNav('month')} typenav={typenav}>\n        Month\n      </ButtonMonth>\n      <ButtonDay onClick={() => setTypeNav('day')} typenav={typenav}>\n        Day\n      </ButtonDay>\n    </div>\n  );\n};\n","import { Container } from './CalendarToolbar.styled';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\n\nexport const CalendarToolbar = ({ date, setDate, typeNav, setTypeNav }) => {\n  return (\n    <Container>\n      <PeriodPaginator\n        minDate={'Jun 23 2023'}\n        date={date}\n        setDate={setDate}\n        typenav={typeNav}\n      />\n      <PeriodTypeSelect typenav={typeNav} setTypeNav={setTypeNav} />\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\n\nexport const Container = styled.div`\npadding: 0 15px\n`","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst getTaskColor = props => {\n  switch (props.taskColor) {\n    case 'low':\n      return 'color: #3E85F3; background-color: #CEEEFD;';\n    case 'medium':\n      return 'color: #F3B249; background-color: #FCF0D4;';\n    case 'high':\n      return 'color: #EA3D65; background-color: #FFD2DD;';\n    default:\n      return 'color: #3E85F3; background-color: #FFFFFF';\n  }\n};\n\nexport const GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  border-radius: 8px;\n`;\n\nexport const CurrentDay = styled.div`\n  color: ${props => (props.isCurrentDate ? '#FFFFFF' : 'inherit')};\n  background-color: ${props => (props.isCurrentDate ? '#3e85f3' : 'inherit')};\n  border-radius: 6px;\n  padding: 4px 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  width: 22px;\n\n  @media (min-width: 768px) {\n    padding: 4px 8px;\n    margin: -4px -8px;\n    border-radius: 8px;\n  }\n`;\n\nexport const SelectedCell = styled.ul`\n  background-color: red;\n  color: red;\n`;\n\nexport const CellWrapper = styled(NavLink)`\n  min-width: 28px;\n  min-height: 94px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  background: #fff;\n  font-family: 'InterBolt';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.17;\n  color: ${props => (props.selected ? 'red' : '#343434')};\n\n  &:first-child {\n    border-top-left-radius: 8px;\n  }\n\n  &:last-child {\n    border-bottom-right-radius: 8px;\n  }\n\n  &:nth-child(7) {\n    border-top-right-radius: 8px;\n  }\n\n  &:nth-last-child(7) {\n    border-bottom-left-radius: 8px;\n  }\n\n  @media (min-width: 376px) {\n    min-width: 48px;\n  }\n\n  @media (min-width: 768px) {\n    min-width: 100px;\n    height: 144px;\n    line-height: 1.12;\n  }\n\n  @media (min-width: 1280px) {\n    height: 135px;\n  }\n`;\n\nexport const DayWrapper = styled.div`\n  padding: 10px 12px;\n  font-weight: 700;\n  font-family: 'InterBolt';\n\n  @media (min-width: 768px) {\n    padding: 18px 22px;\n  }\n`;\n\nexport const ShowDayWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const Modal = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  background-color: #fff;\n  padding: 40px;\n`;\n\nexport const TaskItem = styled.li`\n  height: 22px;\n  padding: 4px 4px 4px 8px;\n  font-family: 'InterBolt';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 10px;\n  line-height: 1.4;\n  border-radius: 8px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-bottom: 4px;\n  ${props => getTaskColor(props)};\n\n  @media (min-width: 768px) {\n    min-width: 92px;\n    height: 26px;\n    padding: 4px 8px 4px 12px;\n    font-size: 10px;\n    line-height: 1.29;\n  }\n\n  @media (min-width: 1280px) {\n    min-width: 114px;\n  }\n`;\n\nexport const TasksMoreLabel = styled.div`\n  margin-top: auto;\n  margin: auto;\n  color: #3e85f3;\n  text-align: center;\n  overflow: hidden;\n  font-size: 14px;\n`;\nexport const TaskWrapper = styled.ul`\n  list-style-type: none;\n  padding: 0 8px 0px 8px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport {\n  CellWrapper,\n  CurrentDay,\n  DayWrapper,\n  GridWrapper,\n  Modal,\n  ModalContent,\n  ShowDayWrapper,\n  TaskItem,\n  TasksMoreLabel,\n  TaskWrapper,\n} from './CalendarTable.styled';\nimport { nanoid } from 'nanoid';\n\nexport const CalendarTable = ({ date }) => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [task, setTask] = useState('');\n  const [tasks, setTasks] = useState([]);\n  const [calendarGrid, setCalendarGrid] = useState([]);\n\n  useEffect(() => {\n    const storedTasks = localStorage.getItem('tasks');\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  useEffect(() => {\n    generateCalendar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [date]);\n\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleTaskChange = event => {\n    setTask(event.target.value);\n  };\n  const handleTaskSubmit = event => {\n    event.preventDefault();\n    const newTask = {\n      date: selectedDate,\n      task: task,\n    };\n    setTasks([...tasks, newTask]);\n    setTask('');\n    closeModal();\n  };\n\n  const generateCalendar = () => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const firstDayIndex = new Date(year, month, 1).getDay();\n\n    const calendarGrid = [];\n    const emptyCellsBefore = firstDayIndex === 0 ? 6 : firstDayIndex - 1;\n    const totalWeeks = Math.ceil((emptyCellsBefore + daysInMonth) / 7);\n\n    for (let i = 0; i < emptyCellsBefore; i++) {\n      calendarGrid.push(<CellWrapper key={nanoid()} />);\n    }\n\n    for (let dayNum = 1; dayNum <= daysInMonth; dayNum++) {\n      const dateS = new Date(year, month, dayNum);\n      const isCurrentDay =\n        dayNum === date.getDate() &&\n        month === new Date().getMonth() &&\n        year === new Date().getFullYear();\n\n      const dayTasks = tasks.filter(\n        task => task.dateS.toDateString() === dateS.toDateString()\n      );\n\n      calendarGrid.push(\n        <CellWrapper\n          key={nanoid()}\n          selected={selectedDate === date}\n          to={`/calendar/day/${dayNum}`}\n        >\n          <ShowDayWrapper>\n            <DayWrapper>\n              <CurrentDay isCurrentDate={isCurrentDay}>{dayNum}</CurrentDay>\n            </DayWrapper>\n          </ShowDayWrapper>\n          {dayTasks.length > 0 && (\n            <TaskWrapper>\n              {dayTasks.slice(0, 2).map(task => (\n                <TaskItem key={nanoid()} onClick={() => handleDateClick(date)}>\n                  {task.task}\n                </TaskItem>\n              ))}\n            </TaskWrapper>\n          )}\n          {dayTasks?.length > 2 && <TasksMoreLabel>...</TasksMoreLabel>}\n        </CellWrapper>\n      );\n    }\n\n    const remainingCells = totalWeeks * 7 - emptyCellsBefore - daysInMonth;\n    for (let i = 0; i < remainingCells; i++) {\n      calendarGrid.push(<CellWrapper key={nanoid()} />);\n    }\n\n    setCalendarGrid(calendarGrid);\n  };\n\n  return (\n    <>\n      <GridWrapper>\n        {calendarGrid}\n        {isModalOpen && (\n          <Modal>\n            <ModalContent>\n              <h3>Selected Date:</h3>\n              <p>{selectedDate?.toDateString()}</p>\n              <form onSubmit={handleTaskSubmit}>\n                <label htmlFor=\"task\">Task:</label>\n                <input\n                  type=\"text\"\n                  id=\"task\"\n                  value={task}\n                  onChange={handleTaskChange}\n                />\n                <button type=\"submit\">Add Task</button>\n              </form>\n              <button onClick={closeModal}>Close</button>\n            </ModalContent>\n          </Modal>\n        )}\n      </GridWrapper>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const GridWrapper = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  padding-left: 0;\n  margin-bottom: 14px;\n`;\n\nexport const CellWrapper = styled.div`\n  height: 50px;\n  background: #ffffff;\n  font-family: 'InterSemiBolt';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.12;\n  text-align: center;\n  text-transform: uppercase;\n  color: #343434;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:first-child {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n\n  &:last-child {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n\n  @media (min-width: 376px) {\n    min-width: 40px;\n  }\n\n  @media (min-width: 768px) {\n    height: 46px;\n  }\n`;\n\nexport const CellWrapperWeekend = styled.li`\n  color: #3e85f3;\n`;\n","import {\n  CellWrapper,\n  CellWrapperWeekend,\n  GridWrapper,\n} from './MonthCalendarHead.styled';\nimport { useMedia } from 'react-use';\n\nexport const MonthCalendarHead = () => {\n  const isMobile = useMedia('(max-width: 767px)');\n  return (\n    <GridWrapper>\n      {isMobile ? (\n        <>\n          <CellWrapper>m</CellWrapper>\n          <CellWrapper>t</CellWrapper>\n          <CellWrapper>w</CellWrapper>\n          <CellWrapper>t</CellWrapper>\n          <CellWrapper>f</CellWrapper>\n          <CellWrapper>\n            <CellWrapperWeekend>s</CellWrapperWeekend>\n          </CellWrapper>\n          <CellWrapper>\n            <CellWrapperWeekend>s</CellWrapperWeekend>\n          </CellWrapper>\n        </>\n      ) : (\n        <>\n          <CellWrapper>mon</CellWrapper>\n          <CellWrapper>tue</CellWrapper>\n          <CellWrapper>wed</CellWrapper>\n          <CellWrapper>thu</CellWrapper>\n          <CellWrapper>fri</CellWrapper>\n          <CellWrapper>\n            <CellWrapperWeekend>sat</CellWrapperWeekend>\n          </CellWrapper>\n          <CellWrapper>\n            <CellWrapperWeekend>sun</CellWrapperWeekend>\n          </CellWrapper>\n        </>\n      )}\n    </GridWrapper>\n  );\n};\n","import { CalendarTable } from './CalendarTable/CalendarTable';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\n\nexport const ChoosedMonth = ({ date }) => {\n  return (\n    <>\n      <MonthCalendarHead />\n      <CalendarTable date={date} />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const GridWrapper = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  margin-bottom: 14px;\n`;\n\nexport const CellWrapper = styled.li`\n  height: 34px;\n  background: ${props => props.theme.mainBackgroundColor};\n  font-family: 'InterSemiBolt';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.12;\n  text-align: center;\n  text-transform: uppercase;\n  color: ${props => props.theme.CalendarHead};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:first-child {\n    border-top-left-radius: 8px;\n  }\n\n  &:nth-child(7) {\n    border-top-right-radius: 8px;\n  }\n\n  @media (min-width: 376px) {\n    min-width: 40px;\n  }\n\n  @media (min-width: 1280px) {\n    font-size: 14px;\n  }\n`;\n\nexport const CellWrapperWeekend = styled.li`\n  color: #3e85f3;\n`;\n\nexport const CellWrapperOfDate = styled.li`\n  height: 34px;\n  background: #ffffff;\n  font-family: 'InterBolt';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.12;\n  text-align: center;\n  text-transform: uppercase;\n  color: #343434;\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n  padding-top: 2px;\n\n  &:nth-last-child(7) {\n    border-bottom-left-radius: 8px;\n  }\n\n  &:last-child {\n    border-bottom-right-radius: 8px;\n  }\n\n  @media (min-width: 376px) {\n    min-width: 40px;\n  }\n`;\nexport const TodayDay = styled.p`\n  color: #ffffff;\n  background-color: #3e85f3;\n  border-radius: 6px;\n  padding: 4px 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media (min-width: 768px) {\n    padding: 4px 8px;\n    margin: -4px -8px;\n    border-radius: 8px;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport {\n  CellWrapper,\n  CellWrapperOfDate,\n  GridWrapper,\n  TodayDay,\n} from './DayCalendarHead.styled';\nimport { startOfWeek, endOfWeek, format, addDays, isSameDay } from 'date-fns';\nimport { useMedia } from 'react-use';\n\nexport const DayCalendarHead = ({ date }) => {\n  const isMobile = useMedia('(max-width: 767px)');\n  const start = startOfWeek(date, { weekStartsOn: 1 });\n  const end = endOfWeek(date, { weekStartsOn: 1 });\n  const week = [];\n  let currentDay = start;\n  while (currentDay <= end) {\n    week.push(currentDay);\n    currentDay = addDays(currentDay, 1);\n  }\n\n  return (\n    <GridWrapper>\n      {isMobile ? (\n        <>\n          <CellWrapper>m</CellWrapper>\n          <CellWrapper>t</CellWrapper>\n          <CellWrapper>w</CellWrapper>\n          <CellWrapper>t</CellWrapper>\n          <CellWrapper>f</CellWrapper>\n          <CellWrapper>s</CellWrapper>\n          <CellWrapper>s</CellWrapper>\n        </>\n      ) : (\n        <>\n          <CellWrapper>mon</CellWrapper>\n          <CellWrapper>tue</CellWrapper>\n          <CellWrapper>wed</CellWrapper>\n          <CellWrapper>thu</CellWrapper>\n          <CellWrapper>fri</CellWrapper>\n          <CellWrapper>sat</CellWrapper>\n          <CellWrapper>sun</CellWrapper>\n        </>\n      )}\n      {week.map(dateItem => {\n        const isCurrentDay = isSameDay(dateItem, date);\n        return (\n          <CellWrapperOfDate key={nanoid()}>\n            {!isCurrentDay && format(dateItem, 'd')}\n            {isCurrentDay && <TodayDay>{format(dateItem, 'd')}</TodayDay>}\n          </CellWrapperOfDate>\n        );\n      })}\n    </GridWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 7px 0;\n  max-width: 301px;\n`;\n\nexport const ColumnTitle = styled.h3`\n  font-family: 'InterSemiBolt';\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.11;\n  color: #111111;\n\n  @media (min-width: 768px) {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n","import { Wrap, ColumnTitle } from './ColumnHeadBar.styled';\n\nexport const ColumnHeadBar = ({ title }) => {\n  switch (title) {\n    case 'toDo':\n      return 'To do';\n    case 'inProgress':\n      return 'In progress';\n    case 'done':\n      return 'Done';\n    default:\n      break;\n  }\n\n  return (\n    <Wrap>\n      <ColumnTitle>{title}</ColumnTitle>\n    </Wrap>\n  );\n};\n","export const ColumnTasksList = ({ listId }) => {\n  return <></>;\n};\n","import { ColumnHeadBar } from './TasksComponents/ColumnHeadBar';\nimport { ColumnTasksList } from './TasksComponents/ColumnTasksList';\n\nexport const TasksColumn = ({ listId, date }) => {\n  return (\n    <>\n      <ColumnHeadBar title={listId} />\n      <ColumnTasksList listId={listId} />\n      {/* <AddTaskBtn/> */}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TasksList = styled.ul`\n  display: flex;\n  list-style: none;\n  gap: 16px;\n  margin-top: 16px;\n  overflow: hidden;\n  overflow-x: auto;\n  scroll-snap-type: x mandatory;\n\n  @media screen and (min-width: 1280px) {\n    gap: 27px;\n  }\n`;\n","import { TasksColumn } from './TasksColumn/TasksColumn';\nimport { TasksList } from './TasksColumnsList.styled';\n\nexport const TasksColumnsList = ({ date }) => {\n  return (\n    <TasksList>\n      <TasksColumn listId=\"toDo\" date={date} />\n      <TasksColumn listId=\"inProgress\" date={date} />\n      <TasksColumn listId=\"done\" date={date} />\n    </TasksList>\n  );\n};\n","import { DayCalendarHead } from './DayCalendarHead';\nimport { TasksColumnsList } from './TasksColumnsList';\n\nexport const ChoosedDay = ({ date }) => {\n  return (\n    <>\n      <DayCalendarHead date={date} />\n      <TasksColumnsList date={date} />\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { CalendarToolbar } from 'components/CalendarToolbar/CalendarToolbar';\nimport { Container } from './Calendar.styled';\nimport { ChoosedMonth } from 'components/ChoosedMonth/ChoosedMonth';\nimport { ChoosedDay } from 'components/ChoosedDay/ChoosedDay';\n\nexport const Calendar = () => {\n  const [date, setDate] = useState(() => new Date());\n  const [typeNav, setTypeNav] = useState('month');\n\n  function renderComponent() {\n    if (typeNav === 'month') {\n      return <ChoosedMonth date={date} />;\n    } else {\n      return <ChoosedDay date={date} />;\n    }\n  }\n\n  return (\n    <Container>\n      <CalendarToolbar\n        date={date}\n        setDate={setDate}\n        typeNav={typeNav}\n        setTypeNav={setTypeNav}\n      />\n      {renderComponent()}\n    </Container>\n  );\n};\n","import { Calendar } from \"components/Calendar/Calendar\"\n\n\nconst CalendarPage = () => {\n  return(\n<Calendar/>\n  )\n}\n\nexport default CalendarPage"],"names":["Wrapper","styled","FormUserProfile","Form","BtnUploadAvatar","Field","Avatar","LabelAvatar","AvatarWrapper","UserName","UserLabel","Input","Label","MainFieldWrapper","BlockFieldWrapper","SubmitBtn","DatePickerStyles","DatePicker","DatePickerWrapper","Container","Period","PickerWrapper","DatePickerCastom","ContainerBtn","Button","ButtonLeft","props","typeDate","ButtonRight","ArrowLeft","MdOutlineKeyboardArrowLeft","disabled","ArrowRight","MdOutlineKeyboardArrowRight","formatPeriod","date","type","options","formattedDate","month","year","Intl","DateTimeFormat","format","day","newDate","split","dayMonth","reverse","join","PeriodPaginator","minDate","setDate","typenav","useState","period","setPeriod","openPicker","setOpenPicker","minDateDisabled","setMinDateDisabled","handleClick","num","modifiedDate","Date","setMonth","getMonth","getDate","changeDate","useEffect","months","getFullYear","arrDate","newMinDate","onClick","open","selected","calendarStartDay","closeOnSelect","onChange","newValue","formatWeekDay","nameOfDay","slice","onClickOutside","ButtonMonth","ButtonDay","PeriodTypeSelect","setTypeNav","CalendarToolbar","typeNav","GridWrapper","CurrentDay","isCurrentDate","CellWrapper","NavLink","DayWrapper","ShowDayWrapper","Modal","ModalContent","TaskItem","taskColor","getTaskColor","TasksMoreLabel","TaskWrapper","CalendarTable","selectedDate","setSelectedDate","isModalOpen","setIsModalOpen","task","setTask","tasks","setTasks","calendarGrid","setCalendarGrid","storedTasks","localStorage","getItem","JSON","parse","setItem","stringify","generateCalendar","closeModal","daysInMonth","firstDayIndex","getDay","emptyCellsBefore","totalWeeks","Math","ceil","i","push","nanoid","dayNum","dateS","isCurrentDay","dayTasks","filter","toDateString","to","length","map","handleDateClick","remainingCells","onSubmit","event","preventDefault","newTask","htmlFor","id","value","target","CellWrapperWeekend","MonthCalendarHead","isMobile","useMedia","ChoosedMonth","theme","mainBackgroundColor","CalendarHead","CellWrapperOfDate","TodayDay","DayCalendarHead","start","startOfWeek","weekStartsOn","end","endOfWeek","week","currentDay","addDays","dateItem","isSameDay","Wrap","ColumnTitle","ColumnHeadBar","title","ColumnTasksList","listId","TasksColumn","TasksList","TasksColumnsList","ChoosedDay","Calendar"],"sourceRoot":""}