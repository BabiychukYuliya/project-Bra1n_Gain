{"version":3,"file":"static/js/941.1597072b.chunk.js","mappings":"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","sources":["pages/StatisticsPage/StatisticsPage.styled.js","components/StatisticsChart/StatisticsChart.js","pages/StatisticsPage/StatisticsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n  padding: 40px;\n  border: 0.8px solid #e3f3ff;\n  border-radius: 29px;\n`;\n\nexport const Text = styled.p`\n  color: #343434;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 150%;\n  text-align: left;\n`;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst StatisticsChart = ({ date }) => {\n  const [tasks, setTasks] = useState([]);\n\n  const checkTasksPercent = percent => (isFinite(percent) ? percent : 0);\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get(\n          'https://bra1n-gain-backend.onrender.com/api/tasks',\n          {\n            headers: {\n              Authorization:\n                'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OWM4OGYxNjQ4NjdlMzZiMTJiOGVkMCIsImlhdCI6MTY4ODE1MDk1NSwiZXhwIjoxNjg4MjMzNzU1fQ.ixUAtvxpcWRx9O4Xr-8mKmNjSYmsA7I6U71eX8eE6Gs',\n            },\n          }\n        );\n        // console.log(response.data.data);\n\n        const data = [\n          {\n            name: 'To Do',\n            day: 0,\n            month: 0,\n          },\n          {\n            name: 'In Progress',\n            day: 0,\n            month: 0,\n          },\n          {\n            name: 'Done',\n            day: 0,\n            month: 0,\n          },\n        ];\n        const filteredDatesByMonth = response.data.data.filter(\n          task => new Date(task.date).getMonth() === date.getMonth()\n        );\n\n        const filteredDatesByDay = response.data.data.filter(\n          task => new Date(task.date).getDay() === date.getDay()\n        );\n\n        filteredDatesByMonth.forEach(task => {\n          if (task.category === 'to-do') {\n            data[0].month +=\n              checkTasksPercent(1 / filteredDatesByMonth.length) * 100;\n            data[0].day +=\n              checkTasksPercent(1 / filteredDatesByDay.length) * 100;\n          } else if (task.category === 'in-progress') {\n            data[1].month +=\n              checkTasksPercent(1 / filteredDatesByMonth.length) * 100;\n            data[1].day +=\n              checkTasksPercent(1 / filteredDatesByDay.length) * 100;\n          } else {\n            data[2].month +=\n              checkTasksPercent(1 / filteredDatesByMonth.length) * 100;\n            data[2].day +=\n              checkTasksPercent(1 / filteredDatesByDay.length) * 100;\n          }\n        });\n        // console.log(data);\n        setTasks(data);\n      } catch (error) {\n        console.error('Error:', error.message);\n      }\n    };\n\n    fetchTasks();\n  }, [date]);\n\n  const renderLabel = props => {\n    const { x, y, width, value } = props;\n    return (\n      <text x={x + width / 2} y={y} fill=\"#black\" textAnchor=\"middle\" dy={-6}>\n        {value} %\n      </text>\n    );\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        width={150}\n        height={40}\n        data={tasks}\n        barGap={-95}\n        maxBarSize={27}\n        margin={{\n          top: 20,\n          right: 20,\n          left: 20,\n          bottom: 20,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"0\" vertical={false} />\n        <XAxis dataKey=\"name\" />\n        <YAxis\n          axisLine={false}\n          tickLine={false}\n          domain={[0, 'dataMax + 2']}\n          tickCount={6}\n        />\n        <Tooltip cursor={{ fill: 'transparent' }} />\n        <Bar\n          dataKey=\"day\"\n          unit=\"%\"\n          fill=\"url(#gradient)\"\n          label={{ content: renderLabel }}\n          radius={[0, 0, 10, 10]}\n        />\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0.1} />\n            <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n        <Bar\n          dataKey=\"month\"\n          unit=\"%\"\n          fill=\"url(#gradient2)\"\n          label={{ content: renderLabel }}\n          radius={[0, 0, 10, 10]}\n        />\n        <defs>\n          <linearGradient id=\"gradient2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0.1} />\n            <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default StatisticsChart;\n","import React, { useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { Container, Text } from './StatisticsPage.styled';\nimport { PeriodPaginator } from 'components/CalendarToolbar/PeriodPaginator/PeriodPaginator';\n// import { getDate } from 'redux/currentDate/selector';\n// import { setDate } from 'redux/currentDate/curentDateSlice';\nimport StatisticsChart from '../../components/StatisticsChart/StatisticsChart';\n\nconst StatisticsPage = () => {\n  const [date, setDate] = useState(new Date());\n  // const dispatch = useDispatch();\n  // const date = useSelector(getDate);\n\n  const handleSetDate = newDate => {\n    console.log(newDate);\n    setDate(newDate);\n  };\n\n  return (\n    <div style={{ padding: '100px' }}>\n      <PeriodPaginator\n        minDate={'Jun 23 2023'}\n        date={date}\n        setDate={handleSetDate}\n        typenav={'day'}\n      />\n\n      <Container style={{ width: 860, height: 440, margin: 'auto' }}>\n        <Text>Tasks</Text>\n        <StatisticsChart date={date} />\n      </Container>\n    </div>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["Container","styled","Text","date","useState","tasks","setTasks","checkTasksPercent","percent","isFinite","useEffect","fetchTasks","axios","headers","Authorization","response","data","name","day","month","filteredDatesByMonth","filter","task","Date","getMonth","filteredDatesByDay","getDay","forEach","category","length","console","error","message","renderLabel","props","x","y","width","value","fill","textAnchor","dy","ResponsiveContainer","height","BarChart","barGap","maxBarSize","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","vertical","XAxis","dataKey","YAxis","axisLine","tickLine","domain","tickCount","Tooltip","cursor","Bar","unit","label","content","radius","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","setDate","style","padding","PeriodPaginator","minDate","newDate","log","typenav"],"sourceRoot":""}