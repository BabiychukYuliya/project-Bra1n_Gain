{"version":3,"file":"static/js/351.062d4487.chunk.js","mappings":"qOAEaA,EAAUC,EAAAA,GAAAA,IAAH,8PCAPC,EAAYD,EAAAA,GAAAA,IAAH,qM,mBCCTE,EAAaF,EAAAA,GAAAA,IAAH,0CAIjBG,GAASH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,obA0BCK,GAAcL,EAAAA,EAAAA,IAAOG,EAAPH,CAAH,uJAOXM,GAAYN,EAAAA,EAAAA,IAAOG,EAAPH,CAAH,6F,SCrCTO,EAAmB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACxBC,GAAgBC,EAAAA,EAAAA,MAAhBD,YAEFE,EAASF,GAA4BD,EAAKI,UAEhD,OACE,UAACV,EAAD,YACE,SAACG,EAAD,CAAaQ,GAAE,gBAAWF,GAA1B,SAAoC,WAGpC,SAACL,EAAD,CAAWO,GAAE,cAASF,GAAtB,SAAgC,UAKrC,E,8BCNYG,EAAkB,WAC7B,IAAMC,GAAWC,EAAAA,EAAAA,MACXR,EAAO,IAAIS,MAAKC,EAAAA,EAAAA,IAAYN,EAAAA,IAE5BO,EAAU,CACdC,OAAOC,EAAAA,EAAAA,SAAOb,EAAM,KACpBc,MAAMD,EAAAA,EAAAA,SAAOb,EAAM,SAGfe,GAAeC,EAAAA,EAAAA,QAAOL,EAAQC,OAepC,OATAK,EAAAA,EAAAA,YAAU,WACR,IAAOH,EAAeH,EAAfG,KAAMF,EAASD,EAATC,MAETG,EAAaG,UAAYN,GAC3BL,GAASY,EAAAA,EAAAA,IAAc,CAAEP,MAAAA,EAAOE,KAAAA,KAElCC,EAAaG,QAAUN,CACxB,GAAE,CAAEL,EAAUI,KAGb,UAAClB,EAAD,YACE,SAAC2B,EAAA,EAAD,CACEC,QAAS,cACTrB,KAAMA,EACNsB,QAlBgB,SAACC,GACrBhB,GAASe,EAAAA,EAAAA,GAAQC,EAAQC,YAC1B,KAkBG,SAACzB,EAAD,CAAkBC,KAAMA,MAG7B,E,oBCPD,EA3BqB,WACnB,IAAMO,GAAWC,EAAAA,EAAAA,MACXR,EAAO,IAAIS,MAAKC,EAAAA,EAAAA,IAAYN,EAAAA,IAC5BqB,GAAOf,EAAAA,EAAAA,IAAYgB,EAAAA,IAczB,OAXAT,EAAAA,EAAAA,YAAU,WACR,GAAmB,IAAhBQ,EAAKE,OAAa,CACrB,IAAMhB,EAAU,CACdC,OAAOC,EAAAA,EAAAA,SAAOb,EAAM,KACpBc,MAAMD,EAAAA,EAAAA,SAAOb,EAAM,SAErBO,GAASY,EAAAA,EAAAA,IAAcR,GACxB,CAEA,GAAE,KAGD,UAACpB,EAAD,YACE,SAACe,EAAD,KACA,SAAC,EAAAsB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAQC,MAAO,KAAnC,UACE,SAAC,KAAD,QAIP,C,uDCrCM,IAAM3B,EAAU,SAAA4B,GAAK,OAAIA,EAAMhC,IAAV,C,wDCArB,IAAM0B,EAAiB,SAAAM,GAAK,OAAIA,EAAMC,MAAMA,KAAhB,C","sources":["pages/CalendarPage/CalendarPage.styled.jsx","components/CalendarToolbar/CalendarToolbar.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.js","components/CalendarToolbar/CalendarToolbar.js","pages/CalendarPage/CalendarPage.js","redux/currentDate/selector.js","redux/task/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  /* max-width: 375px; */\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    /* max-width: 704px; */\n  }\n\n  @media screen and (min-width: 1280px) {\n    /* max-width: 1087px; */\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  \n  @media screen and (min-width: 768px) {\n    justify-content: space-between;\n    flex-direction: row;\n  }\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavWrraper = styled.div`\n  display: flex;\n`\n\nconst Button = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 76px;\n  height: 34px;\n  font-size: 14px;\n  color: #3e85f3;\n  background-color: #e3f3ff;\n\n  @media screen and (min-width: 768px) {\n    width: 82px;\n    height: 34px;\n    font-size: 16px;\n  }\n  :hover,\n  :focus{\nbackground-color: #CAE8FF;\ntransition-duration: 500ms;\n  }\n\n  &.active{\nbackground-color: #CAE8FF;\n  }\n`;\n\nexport const ButtonMonth = styled(Button)`\n  border-radius: none;\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n  border-right: 1px solid #aed4fd;\n`;\n\nexport const ButtonDay = styled(Button)`\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { NavWrraper, ButtonDay, ButtonMonth } from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = ({date}) => {\n  const { currentDate } = useParams()\n\n  const params = currentDate ? currentDate : date.getDate();\n\n  return (\n    <NavWrraper>\n      <ButtonMonth to={`month/${params}`}>\n        Month\n      </ButtonMonth>\n      <ButtonDay to={`day/${params}`}>\n        Day\n      </ButtonDay>\n    </NavWrraper>\n  );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useDispatch, useSelector } from 'react-redux';\nimport { format } from 'date-fns';\nimport { useRef, useEffect } from 'react';\n\nimport { Container } from './CalendarToolbar.styled';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\nimport {getDate} from 'redux/currentDate/selector';\nimport {setDate} from 'redux/currentDate/curentDateSlice';\nimport { fetchAllTasks } from 'redux/task/operations';\n\nexport const CalendarToolbar = () => {\n  const dispatch = useDispatch();\n  const date = new Date(useSelector(getDate));\n\n  const dateObj = {\n    month: format(date, \"L\"),\n    year: format(date, \"yyyy\"),\n  };\n\n  const prevMonthRef = useRef(dateObj.month);\n\n  const handleSetDate = (newDate) => {\n    dispatch(setDate(newDate.toString()))\n  }\n\n  useEffect(() => {\n    const {year, month} = dateObj\n\n    if (prevMonthRef.current !== month) {\n      dispatch(fetchAllTasks({ month, year }));\n    }\n    prevMonthRef.current = month;\n  }, [ dispatch, dateObj]);\n\n  return (\n    <Container>\n      <PeriodPaginator\n        minDate={'Jun 23 2023'}\n        date={date}\n        setDate={handleSetDate}\n      />\n      <PeriodTypeSelect date={date} />\n    </Container>\n  );\n};\n","import { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\nimport { format } from 'date-fns';\n\nimport { Section } from './CalendarPage.styled';\nimport { CalendarToolbar } from 'components/CalendarToolbar/CalendarToolbar';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchAllTasks } from 'redux/task/operations';\nimport { getDate } from 'redux/currentDate/selector';\nimport { selectAllTasks } from 'redux/task/selectors';\n\nconst CalendarPage = () => {\n  const dispatch = useDispatch();  \n  const date = new Date(useSelector(getDate))\n  const task = useSelector(selectAllTasks);\n\n\n  useEffect(() => {\n    if(task.length === 0){\n    const dateObj = {\n      month: format(date, \"L\"),\n      year: format(date, \"yyyy\")\n    }\n    dispatch(fetchAllTasks(dateObj));\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Section>\n      <CalendarToolbar />\n      <Suspense fallback={<Loader width={96} />}>\n        <Outlet />\n      </Suspense>\n    </Section>\n  );\n};\n\nexport default CalendarPage;\n\n","export const getDate = state => state.date;","export const selectAllTasks = state => state.tasks.tasks;\n\nexport const selectTasksError = state => state.tasks.error;\n\nexport const selectTasksLoading = state => state.tasks.isLoading;\n\nexport const selectSuccessful = state => state.tasks.successful;\n"],"names":["Section","styled","Container","NavWrraper","Button","NavLink","ButtonMonth","ButtonDay","PeriodTypeSelect","date","currentDate","useParams","params","getDate","to","CalendarToolbar","dispatch","useDispatch","Date","useSelector","dateObj","month","format","year","prevMonthRef","useRef","useEffect","current","fetchAllTasks","PeriodPaginator","minDate","setDate","newDate","toString","task","selectAllTasks","length","Suspense","fallback","Loader","width","state","tasks"],"sourceRoot":""}